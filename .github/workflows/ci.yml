name: CI
on:
  push:
    paths-ignore:
      - "Docs/*"
      - .travis.yml
      - appveyor.yml
      - .gitignore
      - "*.md"
  pull_request:
    paths-ignore:
      - "Docs/*"
      - .travis.yml
      - appveyor.yml
      - .gitignore
      - "*.md"

env:
  native_deps: yasm cmake ccache
  GTEST_TOTAL_SHARDS: 8

jobs:
  build:
    name: build (${{ matrix.CC }})
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - packages: gcc-4.8 g++-4.8
            CC: gcc-4.8
            CXX: g++-4.8
          - packages: gcc-7 g++-7
            CC: gcc-7
            CXX: g++-7
          - packages: gcc-8 g++-8
            CC: gcc-8
            CXX: g++-8
          - packages: gcc-9 g++-9
            CC: gcc-9
            CXX: g++-9
          - packages: gcc-10 g++-10
            CC: gcc-10
            CXX: g++-10
            CMAKE_EFLAGS: -DBUILD_TESTING=ON
            CFLAGS: -Wno-error
            CXXFLAGS: -Wno-error
            # Currently requires -Wno-error since building the unit-tests will cause warnings
          - CC: clang-6.0
            CXX: clang++-6.0
          - packages: clang-10
            CC: clang-10
            CXX: clang++-10
    env:
      CC: ccache ${{ matrix.CC }}
      CXX: ccache ${{ matrix.CXX }}
      CFLAGS: -Werror -Wshadow ${{ matrix.CFLAGS }}
      CXXFLAGS: -Werror -Wshadow ${{ matrix.CXXFLAGS }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache ccache files
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.CC }}-${{ hashFiles('**/*.c') }}
          restore-keys: ${{ runner.os }}-${{ matrix.CC }}-
      - name: Add Clang apt repository
        if: matrix.CC == 'clang-10'
        run: |
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" |
            sudo tee -a /etc/apt/sources.list.d/llvm.list
          curl -L https://apt.llvm.org/llvm-snapshot.gpg.key |
            sudo apt-key add -
      - name: Install dependencies
        run: |
          [ -d ~/.ccache ] && sudo chown -R "$USER": ~/.ccache
          printf '%s\n' "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y ${{ env.native_deps }} ${{ matrix.packages }}
      - name: Configure SVT-AV1
        run: cmake -S "$GITHUB_WORKSPACE" -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ${{ matrix.CMAKE_EFLAGS }}
      - name: Build and install SVT-AV1
        run: sudo -E cmake --build Build --parallel 4 --target install
      - name: Get test vectors
        if: matrix.CC == 'gcc-10'
        run: cmake --build Build --parallel 4 --target TestVectors
      - name: Upload vectors
        if: matrix.CC == 'gcc-10'
        uses: actions/upload-artifact@v2
        with:
          name: svtav1-vectors-${{ hashFiles('test/e2e_test/test_vector_list.txt') }}
          path: test/vectors
      - name: Download videos
        if: matrix.CC == 'gcc-7'
        run: |
          for url in raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master randomderp.com; do
            curl -LO https://$url/video.tar.gz && break
          done
          tar xf video.tar.gz
      - name: Upload binaries SVT-AV1 (ubuntu)
        if: matrix.CC == 'gcc-10'
        uses: actions/upload-artifact@v2
        with:
          name: svtav1-ubuntu-binaries
          path: Bin/Release
      - name: Upload videos
        if: matrix.CC == 'gcc-7'
        uses: actions/upload-artifact@v2
        with:
          name: svtav1-videos
          path: "*.y4m"

  bit-depth-tests:
    name: ${{ matrix.bit }} tests
    runs-on: ubuntu-18.04
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - bit: 8
            video: akiyo_cif.y4m
          - bit: 10
            video: Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
    steps:
      - name: Download binaries SVT-AV1 (ubuntu)
        uses: actions/download-artifact@v2
        with:
          name: svtav1-ubuntu-binaries
      - name: Download videos
        uses: actions/download-artifact@v2
        with:
          name: svtav1-videos
      - name: Print system info
        run: sort -u /proc/cpuinfo
      - name: ${{ matrix.bit }}bit tests
        run: |
          chmod +x SvtAv1EncApp
          ./SvtAv1EncApp --preset 0 -i ${{ matrix.video }} -n 3 -b test-pr-${{ matrix.bit }}bit-m0.ivf
          ./SvtAv1EncApp --preset 8 -i ${{ matrix.video }} -n 120 -b test-pr-${{ matrix.bit }}bit-m8.ivf
      - uses: actions/upload-artifact@v2
        with:
          name: svtav1-${{ matrix.bit }}bit-pr-tests
          path: "*.ivf"

  binary-identical-test:
    runs-on: ubuntu-18.04
    needs:
      - build
      - bit-depth-tests
    env:
      CC: ccache gcc-9
      CXX: ccache g++-9
    steps:
      - name: Checkout SVT-AV1 on pull request (master)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}
      - name: Checkout SVT-AV1 on push (master)
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Cache ccache files
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-binary-test-${{ hashFiles('**/*.c') }}
          restore-keys: ${{ runner.os }}-binary-test-
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.native_deps }} gcc-9 g++-9
      - name: Download videos
        uses: actions/download-artifact@v2
        with:
          name: svtav1-videos
      - name: Configure SVT-AV1 (master)
        run: cmake -S "$GITHUB_WORKSPACE" -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
      - name: Build SVT-AV1 (master)
        run: cmake --build Build --parallel 4
      - name: Encode videos (master)
        run: |
          ./Bin/Release/SvtAv1EncApp --preset 0 -i akiyo_cif.y4m -n 3 -b test-master-8bit-m0.ivf
          ./Bin/Release/SvtAv1EncApp --preset 8 -i akiyo_cif.y4m -n 120 -b test-master-8bit-m8.ivf
          ./Bin/Release/SvtAv1EncApp --preset 0 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 3 -b test-master-10bit-m0.ivf
          ./Bin/Release/SvtAv1EncApp --preset 8 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 120 -b test-master-10bit-m8.ivf
      - name: Download 8bit pr tests
        uses: actions/download-artifact@v2
        with:
          name: svtav1-8bit-pr-tests
      - name: Download 10bit pr tests
        uses: actions/download-artifact@v2
        with:
          name: svtav1-10bit-pr-tests
      - name: Binary compare
        id: binary_compare
        continue-on-error: true
        run: |
          echo Comparing 8-bit M8: akiyo_cif.y4m
          diff test-{pr,master}-8bit-m8.ivf
          echo Comparing 8-bit M0: akiyo_cif.y4m
          diff test-{pr,master}-8bit-m0.ivf
          echo Comparing 10-bit M8: Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
          diff test-{pr,master}-10bit-m8.ivf
          echo Comparing 10-bit M0: Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
          diff test-{pr,master}-10bit-m0.ivf
      - name: On fail, upload artifact SVT-AV1 (master)
        if: steps.binary_compare.outcome != 'success'
        uses: actions/upload-artifact@v2
        with:
          name: svtav1-master-binaries
          path: master/Bin/Release

  # Compile and run tests in shards
  unit-tests:
    name: Unit Tests (Ubuntu 18.04, GCC 9.x) Shard ${{ matrix.index }}
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        index: [0, 1, 2, 3, 4, 5, 6, 7]
    env:
      GTEST_SHARD_INDEX: ${{ matrix.index }}
    steps:
      - uses: actions/checkout@v2
      - name: Download binaries SVT-AV1 (ubuntu)
        uses: actions/download-artifact@v2
        with:
          name: svtav1-ubuntu-binaries
          path: Bin/Release
      - name: Run unit tests shard
        run: chmod +x ./Bin/Release/SvtAv1UnitTests; ./Bin/Release/SvtAv1UnitTests

  e2e-tests:
    name: E2E Tests (Ubuntu 18.04, GCC 9.x) Shard ${{ matrix.index }}
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        index: [0, 1, 2, 3, 4, 5, 6, 7]
    env:
      GTEST_SHARD_INDEX: ${{ matrix.index }}
      SVT_AV1_TEST_VECTOR_PATH: ${{ github.workspace }}/test/vectors
    steps:
      - uses: actions/checkout@v2
      - name: Download binaries SVT-AV1 (ubuntu)
        uses: actions/download-artifact@v2
        with:
          name: svtav1-ubuntu-binaries
          path: Bin/Release
      - name: Download vectors
        uses: actions/download-artifact@v2
        with:
          name: svtav1-vectors-${{ hashFiles('test/e2e_test/test_vector_list.txt') }}
          path: test/vectors
      - name: Run unit tests shard
        run: chmod +x ./Bin/Release/SvtAv1E2ETests; ./Bin/Release/SvtAv1E2ETests --gtest_filter=-*DummySrcTest*
